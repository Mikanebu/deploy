---
- name: Clone DPR-API
  git:
    repo: "{{ dpr_api_git }}"
    dest: "{{ dpr_api_path }}"

- name: Creating Zappa config template
  action: template src=zappa.j2 dest={{ zappa_conf_path }}

- name: Create virtual environmane directory
  file:
    path: "{{ virtualenv_path }}"
    state: directory
    mode: 0755

- name: Creating virtual environment source script
  action: template src=venv_exec.j2 dest={{ virtualenv_path }}/exec mode=755

- name: Install zappa requirements
  pip:
    requirements: "{{ dpr_api_path }}/requirements.txt"
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: python2.7

- name: Copy manager.sh to dpr api clone directory
  copy:
    src: "{{ role_path }}/files/manager.sh"
    dest: "{{dpr_api_path}}/"

- name: Run manager to populate data and create models
  command: "{{ virtualenv_path }}/exec python manager.py createdb chdir={{dpr_api_path}}"
  environment:
    FLASK_CONFIGURATION: stage
    AUTH0_CLIENT_ID: "{{auth0_client_id}}"
    AUTH0_CLIENT_SECRET: "{{auth0_client_secret}}"
    AUTH0_DOMAIN: "{{auth0_domain}}"
    AUTH0_DB_NAME: "{{auth0_connection_name}}"
    AUTH0_API_AUDIENCE: "{{auth0_audiance}}"
    S3_BUCKET_NAME: "{{s3_bucketname}}"
    FLASKS3_BUCKET_NAME: "{{s3_bucketname}}"
    AWS_ACCESS_KEY_ID: "{{aws_key}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret}}"
    AWS_REGION: "{{aws_region}}"
    SQLALCHEMY_DATABASE_URI: "postgresql://{{rds_instance_user}}:{{rds_instance_password}}@{{ rds.instance.endpoint }}:{{ rds.instance.port }}/{{rds_instance_db_name}}"

- name: Run manager to populate data and create models
  command: "{{ virtualenv_path }}/exec python manager.py populate chdir={{dpr_api_path}}"
  environment:
    FLASK_CONFIGURATION: stage
    AUTH0_CLIENT_ID: "{{auth0_client_id}}"
    AUTH0_CLIENT_SECRET: "{{auth0_client_secret}}"
    AUTH0_DOMAIN: "{{auth0_domain}}"
    AUTH0_DB_NAME: "{{auth0_connection_name}}"
    AUTH0_API_AUDIENCE: "{{auth0_audiance}}"
    S3_BUCKET_NAME: "{{s3_bucketname}}"
    FLASKS3_BUCKET_NAME: "{{s3_bucketname}}"
    AWS_ACCESS_KEY_ID: "{{aws_key}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret}}"
    AWS_REGION: "{{aws_region}}"
    SQLALCHEMY_DATABASE_URI: "postgresql://{{rds_instance_user}}:{{rds_instance_password}}@{{ rds.instance.endpoint }}:{{ rds.instance.port }}/{{rds_instance_db_name}}"



- name: Deploy zappa application.
  command: "{{ virtualenv_path }}/exec zappa deploy stage -s {{ zappa_conf_path }} --json chdir={{ dpr_api_path }}"
  register: zappa_deploy
  failed_when: "'already deployed' in zappa_deploy.stderr"

- debug: msg="{{ zappa_deploy }}"

- name: Update zappa application. As it is already deployed
  command: "{{ virtualenv_path }}/exec zappa update stage -s {{ zappa_conf_path }} --json chdir={{ dpr_api_path }}"
  register: zappa_update
  when: zappa_deploy|failed

- debug: msg="{{ zappa_update }}"
  when: zappa_deploy|failed

- name: Zappa status
  command: "{{ virtualenv_path }}/bin/zappa status stage -s {{ zappa_conf_path }} --json"
  register: zappa_status

- set_fact:
    zappa_status_json: "{{ zappa_status.stdout|from_json }}"

- name: Remove DPR-API directory
  file:
    state: absent
    path: "{{ dpr_api_path }}"
